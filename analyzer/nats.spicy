module NATS;

const MAX_SIZE = 1024 * 1024;

# Bytes with a max size ending with CRLF
type SizedBytes = unit {
    data: bytes &until=b"\x0d\x0a" &max-size=MAX_SIZE;
} &convert=self.data;

# Whitespace is optional in many places
const OptWhitespace = /[ \t]*/;

const ClientCommands = /(CONNECT|PUB|HPUB|SUB|UNSUB|PING|PONG)/i;
const ServerCommands = /(INFO|MSG|HMSG|PING|PONG|+OK|-ERR)/i;

type Command = enum {
    INFO,
    CONNECT,
    PUB,
    HPUB,
    SUB,
    UNSUB,
    MSG,
    HMSG,
    PING,
    PONG,
    OK,
    ERR,
};

function to_command(parsed: bytes) : Command {
    switch (parsed.upper()) {
        case b"INFO": return Command::INFO;
        case b"CONNECT": return Command::CONNECT;
        case b"PUB": return Command::PUB;
        case b"HPUB": return Command::HPUB;
        case b"SUB": return Command::SUB;
        case b"UNSUB": return Command::UNSUB;
        case b"MSG": return Command::MSG;
        case b"HMSG": return Command::HMSG;
        case b"PING": return Command::PING;
        case b"PONG": return Command::PONG;
        case b"+OK": return Command::OK;
        case b"-ERR": return Command::ERR;
    }
}

public type ClientMessages = unit {
    : ClientData[];
};

public type ClientData = unit {
    message_type: ClientCommands &convert=to_command($$);
    : OptWhitespace;
    switch (self.message_type) {
        Command::CONNECT -> connect: Connect;
        Command::PUB -> pub: Pub;
        Command::HPUB -> hpub: HPub;
        Command::SUB -> sub: Sub;
        Command::UNSUB -> unsub: Unsub;
        # No payloads, parse the CRLF though
        Command::PING, Command::PONG -> : b"\x0d\x0a";
    };
};

public type ServerMessages = unit {
    : ServerData[] ;
};

public type ServerData = unit {
    message_type: ServerCommands &convert=to_command($$);
    : OptWhitespace;
    switch (self.message_type) {
        Command::INFO -> info: Info;
        Command::MSG -> msg: Msg;
        Command::HMSG -> hmsg: HMsg;
        Command::ERR -> err: Err;
        # No payloads, parse the CRLF though
        Command::PING, Command::PONG, Command::OK -> : b"\x0d\x0a";
    };
};

function get_bytes(val: OptionValue): bytes {
    if (val?.bool_) return val.bool_;
    if (val?.string_) return val.string_;
    if (val?.num) return val.num;
    if (val?.list_) return b"".join(val.list_);

    # TODO: Unreachable?
    return b"";
}
# A typed value for options in key/value pairs
type OptionValue = unit {
    switch {
        -> bool_: /true|false/;
        -> string_: /"[^"]*"/;
        -> num: /[[:digit:]]+/;
        -> {
            : b"[";
            # TODO: Right now only string lists exist, may be worth to generalize.
            # Generalizing (currently) makes this recursive.
            # TODO: Remove comma, it's just annoying to do otherwise
            list_: /"[^"]*"[,]?/[];
            : b"]";
        }
    };
};

type KeyValPair = unit {
    # TODO: this is string only
    key: bytes &until=b":";
    : OptWhitespace;
    # TODO: Escaped quotes
    val: OptionValue &convert=get_bytes($$);
    : OptWhitespace;
    : /,?/;
    : OptWhitespace;
};

type KeyVal = unit {
    : b"{";
    : OptWhitespace;
    pairs: KeyValPair[];
    : b"}";
} &convert=to_map(self);

type Info = unit {
    payload: KeyVal;
    : OptWhitespace;
    : b"\x0d\x0a";
};

type Connect = unit {
    payload: KeyVal;
    : OptWhitespace;
    : b"\x0d\x0a";
};

type Pub = unit {
    subject: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;

    # Parse an optional string, then a number, then CRLF.
    var reply_to: bytes;
    var num_bytes: uint64;

    : /([^ \t\r\n]*)[ \t]*([[:digit:]])+\r\n/ &max-size=MAX_SIZE {
        # Strip off possible whitespace
        self.reply_to = $1.strip();
        self.num_bytes = $2.to_uint();
    }

    # TODO: This should just be num_bytes size
    payload: SizedBytes;
};

type HPub = unit {
    subject: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;

    # Parse an optional string, then a number, then CRLF.
    var reply_to: bytes;
    var num_bytes: int64;

    : /([^ \t\r\n]*)[ \t]*([[:digit:]])+\r\n/ &max-size=MAX_SIZE {
        # Strip off possible whitespace
        self.reply_to = $1.strip();
        self.num_bytes = $2.to_int();
    }

    # Note, two CRLF
    headers: KeyVal;
    : b"\x0d\x0a\x0d\x0a";
    payload: SizedBytes;
};

type Sub = unit {
    subject: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;

    # Parse an optional string, then an alphanumeric subscriber ID
    var queue_group: bytes;
    var sid: bytes;

    : /([^ \t\r\n]*)[ \t]*([[:upper:][:lower:][:digit:]])+\r\n/ &max-size=MAX_SIZE {
        self.queue_group = $1.strip();
        self.sid = $2;
    }
};

type Unsub = unit {
    # Parse an optional string, then a number, then CRLF.
    var sid: bytes;
    var max_msgs: int64;

    : /([^ \t\r\n]*)[ \t]*([[:digit:]])*\r\n/ &max-size=MAX_SIZE {
        # Strip off the possible whitespace
        self.sid = $1.strip();
        self.max_msgs = $2.to_int();
    }
};

type Msg = unit {
    subject: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;
    sid: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;

    # Parse an optional string, then a number, then CRLF.
    var reply_to: bytes;
    var num_bytes: int64;

    : /([^ \t\r\n]*)[ \t]*([[:digit:]])+\r\n/ &max-size=MAX_SIZE {
        self.reply_to = $1.strip();
        self.num_bytes = $2.to_int();
    }

    payload: SizedBytes;
};

type HMsg = unit {
    subject: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;
    sid: bytes &max-size=MAX_SIZE &until=b" ";
    : OptWhitespace;

    # Parse an optional string, then a number, then space.
    var reply_to: bytes;
    var header_bytes: int64;

    : /([^ \t\r\n]*)[ \t]*([[:digit:]])+[ ]+/ &max-size=MAX_SIZE {
        self.reply_to = $1.strip();
        self.header_bytes = $2.to_int();
    }

    # We only got to the header bytes before, parse the total bytes now
    total_bytes: SizedBytes &convert=$$.to_int();

    # Note, two CRLF
    headers: KeyVal;
    : b"\x0d\x0a\x0d\x0a";
    payload: SizedBytes;
};

type Err = unit {
    message: SizedBytes;
};

function to_map(keyval: KeyVal): map<bytes, bytes> {
    local res: map<bytes, bytes> = map();

    for (pair in keyval.pairs) {
        res[pair.key] = pair.val;
    }

    return res;
}
